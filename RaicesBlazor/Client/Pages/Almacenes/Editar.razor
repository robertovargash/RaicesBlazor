@page "/almacenes/editar/{Id:int}"
@inject HttpClient Http;
@inject NavigationManager NavigationManager

<h1>@Titulo almacén</h1>
<hr />
<EditForm Model="@almacen" OnValidSubmit="GuardarAlmacen">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Name" class="form-label">Nombre almacén</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="almacen.Nombre" placeholder="Nombre" />
        </div>
        <ValidationMessage For="@(() => almacen.Nombre)" />
    </div>
    <div class="mb-3">
        <label for="Descrption" class="form-label">Descripción</label>
        <div class="col-md-4">
            <InputTextArea class="form-control" @bind-Value="almacen.Descripcion" style="height:150px" placeholder="Descripción" />
        </div>
        <ValidationMessage For="@(() => almacen.Descripcion)" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Guardar</button>
        <button class="btn btn-light" @onclick="Cancel">Cancelar</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    protected string Titulo = "Editar";
    protected Almacen almacen = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Titulo = "Editar";
            almacen = await Http.GetFromJsonAsync<Almacen>("api/Almacenes/" + Id.ToString());
        }
    }

    protected async Task GuardarAlmacen()
    {
        if (almacen.Id != 0)
        {
            await Http.PutAsJsonAsync("api/Almacenes", almacen);
        }
        Cancel();
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/almacenes");
    }
}
