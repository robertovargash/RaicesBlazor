@page "/almacenes"
@inject HttpClient client
@inject IJSRuntime js
<h1>Lista de Almacenes</h1>
<div class="form-group">
    <a class="btn btn-success" href="almacenes/nuevo"><i class="oi oi-plus"></i> Nuevo</a>
</div>

<br />
@if (almacens == null)
{
    <p><em>Loading...</em></p>
}
else if (almacens.Count == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table">
        <thead class="table-success">
            <tr>
                <th>#</th>
                <th>Name</th>
                <th>Descripción</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Almacen almacen in almacens)
            {
                <tr>
                    <td>@almacen.Id</td>
                    <td>@almacen.Nombre</td>
                    <td>@almacen.Descripcion</td>
                    <td>
                        <a class="btn btn-success" href="almacenes/editar/@almacen.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(almacen.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Almacen> almacens { get; set; }
    protected override async Task OnInitializedAsync()
    {
        almacens = await client.GetFromJsonAsync<List<Almacen>>("api/Almacenes");
    }
    async Task Delete(int Id)
    {
        var clasif = almacens.First(x => x.Id == Id);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {clasif.Nombre}'s ({clasif.Id}) Record?"))
        {
            await client.DeleteAsync($"api/Almacenes/{Id}");
            await OnInitializedAsync();
        }
    }
}
